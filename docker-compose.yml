# Voice Stack - Portainer Optimized Configuration
# All configuration embedded in compose file for Portainer compatibility
# No external scripts or volume mounts required

services:
  postgres:
    image: postgres:15.4-alpine
    container_name: voice-stack-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-synapse}
      POSTGRES_USER: ${POSTGRES_USER:-synapse}  
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --locale=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - voice-stack-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-synapse} -d $${POSTGRES_DB:-synapse}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command:
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB

  synapse:
    image: matrixdotorg/synapse:v1.96.1
    container_name: voice-stack-synapse
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:?SYNAPSE_SERVER_NAME is required}
      SYNAPSE_REPORT_STATS: ${SYNAPSE_REPORT_STATS:-no}
      SYNAPSE_CONFIG_DIR: /data
      SYNAPSE_CONFIG_PATH: /data/homeserver.yaml
      ELEMENT_PUBLIC_URL: ${ELEMENT_PUBLIC_URL:-}
      POSTGRES_DB: ${POSTGRES_DB:-synapse}
      POSTGRES_USER: ${POSTGRES_USER:-synapse}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REGISTRATION_SHARED_SECRET: ${REGISTRATION_SHARED_SECRET:?REGISTRATION_SHARED_SECRET is required}
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-false}
      ENABLE_REGISTRATION_WITHOUT_VERIFICATION: ${ENABLE_REGISTRATION_WITHOUT_VERIFICATION:-false}
      COTURN_STATIC_AUTH_SECRET: ${COTURN_STATIC_AUTH_SECRET:?COTURN_STATIC_AUTH_SECRET is required}
      ALLOW_GUEST_ACCESS: ${ALLOW_GUEST_ACCESS:-false}
      URL_PREVIEW_ENABLED: ${URL_PREVIEW_ENABLED:-true}
      REQUIRE_IDENTITY_SERVER: ${REQUIRE_IDENTITY_SERVER:-false}
      TRUSTED_KEY_SERVERS: ${TRUSTED_KEY_SERVERS:-["matrix.org"]}
    volumes:
      - synapse_data:/data
      - media_store:/data/media_store
    networks:
      - voice-stack-network
    ports:
      - "${SYNAPSE_PORT:-8008}:8008"
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8008/health', timeout=5).getcode()==200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    entrypoint: []
    command:
      - sh
      - -c
      - |
        set -eu
        
        # Validate required environment variables
        for var in SYNAPSE_SERVER_NAME POSTGRES_PASSWORD REGISTRATION_SHARED_SECRET COTURN_STATIC_AUTH_SECRET; do
          eval "val=\$$var"
          if [ -z "$val" ]; then
            echo "ERROR: $var must be set"
            exit 1
          fi
        done
        
        # Generate homeserver.yaml if it doesn't exist
        if [ ! -f /data/homeserver.yaml ]; then
          echo "Generating production homeserver.yaml..."
          
          # Generate initial config
          python -m synapse.app.homeserver \
            --server-name "$SYNAPSE_SERVER_NAME" \
            --config-path /data/homeserver.yaml \
            --generate-config \
            --report-stats="$SYNAPSE_REPORT_STATS" || {
              echo "ERROR: Failed to generate initial config"
              exit 1
            }
        fi
        
        # Apply production configuration inline
        cat > /data/homeserver_prod.yaml << EOF
        # Production Synapse Configuration - Generated by Portainer Stack
        server_name: "$SYNAPSE_SERVER_NAME"
        pid_file: /data/homeserver.pid
        web_client_location: "${ELEMENT_PUBLIC_URL:-https://chat.$SYNAPSE_SERVER_NAME/}"

        # Network configuration  
        listeners:
          - port: 8008
            tls: false
            type: http
            x_forwarded: true
            bind_addresses: ['0.0.0.0']
            resources:
              - names: [client, federation]
                compress: false

        # Database (PostgreSQL only)
        database:
          name: psycopg2
          args:
            user: $POSTGRES_USER
            password: $POSTGRES_PASSWORD
            database: $POSTGRES_DB
            host: postgres
            port: 5432
            cp_min: 5
            cp_max: 25

        # Media and uploads
        media_store_path: /data/media_store
        max_upload_size: 100M
        max_image_pixels: 32M

        # Registration and security
        enable_registration: $ENABLE_REGISTRATION
        registration_shared_secret: "$REGISTRATION_SHARED_SECRET"
        enable_registration_without_verification: $ENABLE_REGISTRATION_WITHOUT_VERIFICATION
        allow_guest_access: $ALLOW_GUEST_ACCESS

        # Federation (DISABLED for private server)
        federation_domain_whitelist: []
        send_federation: false
        allow_public_rooms_over_federation: false
        allow_public_rooms_without_auth: false

        # Security settings
        serve_server_wellknown: false
        public_baseurl: https://$SYNAPSE_SERVER_NAME/
        trusted_key_servers: $TRUSTED_KEY_SERVERS
        suppress_key_server_warning: true

        # TURN server configuration
        turn_uris:
          - "turn:$SYNAPSE_SERVER_NAME:3478?transport=udp"
          - "turn:$SYNAPSE_SERVER_NAME:3478?transport=tcp"
        turn_shared_secret: "$COTURN_STATIC_AUTH_SECRET"
        turn_user_lifetime: 86400000
        turn_allow_guests: true

        # Element Call / Matrix RTC Focus Configuration
        experimental_features:
          msc3401_group_voice_calls: true
          msc3402_group_video_calls: true  
          msc4191_element_call_matrix_rtc_focus: true
          msc4230_element_call_per_device_encryption: true
          msc4010_push_rules_account_data: true

        # RTC Focus settings
        rtc_focus:
          enabled: true
          use_as_focus: true
          participant_timeout: 30
          focus_selection_timeout: 10

        # User directory (local only)
        user_directory:
          enabled: true
          search_all_users: true
          prefer_local_users: true

        # URL preview configuration
        url_preview_enabled: $URL_PREVIEW_ENABLED
        
        # Identity server configuration
        require_identity_server: $REQUIRE_IDENTITY_SERVER

        # Rate limiting for security
        rc_message:
          per_second: 10
          burst_count: 50
        rc_registration:
          per_second: 0.17
          burst_count: 3
        rc_login:
          address:
            per_second: 0.17
            burst_count: 3

        # Room settings
        default_room_version: "10"
        encryption_enabled_by_default_for_room_type: all

        # Statistics reporting  
        report_stats: $SYNAPSE_REPORT_STATS

        # Signing key path
        signing_key_path: "/data/signing.key"

        # Password complexity
        password_config:
          enabled: true
          policy:
            minimum_length: 8
            require_digit: true
            require_symbol: true
            require_lowercase: true
            require_uppercase: true

        # Email disabled
        email:
          enable_notifs: false

        # Logging configuration
        log_config: |
          version: 1
          formatters:
            precise:
              format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(message)s'
          handlers:
            console:
              class: logging.StreamHandler
              formatter: precise
              stream: ext://sys.stdout
          loggers:
            synapse.storage.SQL:
              level: WARN
          root:
            level: ${LOG_LEVEL:-INFO}
            handlers: [console]
        EOF
        
        # Use the production config
        cp /data/homeserver_prod.yaml /data/homeserver.yaml
        
        # Generate signing key if it doesn't exist
        if [ ! -f /data/signing.key ]; then
          python -m synapse.app.homeserver --config-path /data/homeserver.yaml --generate-keys
        fi
        
        echo "Starting Synapse with production configuration..."
        exec python -m synapse.app.homeserver --config-path /data/homeserver.yaml

  element:
    image: nginx:1.25.3-alpine
    container_name: voice-stack-element
    restart: unless-stopped
    environment:
      ELEMENT_VERSION: ${ELEMENT_VERSION:-v1.11.86}
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:?SYNAPSE_SERVER_NAME is required}
      ELEMENT_JITSI_DOMAIN: ${ELEMENT_JITSI_DOMAIN:-meet.jit.si}
    volumes:
      - element_data:/usr/share/nginx/html
    networks:
      - voice-stack-network
    ports:
      - "${ELEMENT_PORT:-8080}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command:
      - sh
      - -c
      - |
        set -eu
        
        WEB_DIR="/usr/share/nginx/html"
        
        # Ensure directory exists
        mkdir -p "$WEB_DIR"
        
        # Download Element if not exists
        if [ ! -f "$WEB_DIR/index.html" ]; then
          echo "Downloading Element ${ELEMENT_VERSION}..."
          apk add --no-cache wget curl
          
          # Download and extract Element Web
          wget -qO /tmp/element.tar.gz "https://github.com/vector-im/element-web/releases/download/${ELEMENT_VERSION}/element-${ELEMENT_VERSION}.tar.gz"
          
          # Create and extract to temp directory
          mkdir -p /tmp/element
          cd /tmp/element
          tar -xzf /tmp/element.tar.gz
          
          # Move contents (find first directory and move its contents)
          ELEMENT_DIR=$(find . -maxdepth 1 -type d -name "element-*" | head -1)
          if [ -n "$ELEMENT_DIR" ]; then
            cp -r "$ELEMENT_DIR"/* "$WEB_DIR/"
          else
            # Fallback: copy everything
            cp -r * "$WEB_DIR/" 2>/dev/null || true
          fi
          
          cd /
          rm -rf /tmp/element /tmp/element.tar.gz
          
          echo "Element extracted successfully"
        else
          echo "Element already exists, installing curl only"
          apk add --no-cache curl
        fi
        
        # Generate Element configuration
        cat > "$WEB_DIR/config.json" << EOF
        {
            "default_server_config": {
                "m.homeserver": {
                    "base_url": "https://$SYNAPSE_SERVER_NAME",
                    "server_name": "$SYNAPSE_SERVER_NAME"
                }
            },
            "brand": "Family Matrix Server",
            "welcome_user_id": "@admin:$SYNAPSE_SERVER_NAME",
            "default_country_code": "US", 
            "show_labs_settings": true,
            "features": {
                "feature_groups": "labs",
                "feature_pinning": "labs",
                "feature_custom_status": "labs",
                "feature_custom_tags": "labs",
                "feature_state_counters": "labs",
                "feature_group_calls": true,
                "feature_element_call_video_rooms": true,
                "feature_report_to_moderators": true,
                "feature_latex_maths": false,
                "feature_polls": true,
                "feature_location_share": false,
                "feature_matrix_rtc": true,
                "feature_element_call_native_group_calls": true
            },
            "default_theme": "light",
            "room_directory": {
                "servers": ["$SYNAPSE_SERVER_NAME"]
            },
            "disable_guests": true,
            "disable_login_language_selector": false,
            "disable_3pid_login": true,
            "setting_defaults": {
                "breadcrumbs": true,
                "UIFeature.voipCallExperience": true,
                "VideoView.flipVideoHorizontally": true,
                "feature_group_calls": true,
                "feature_element_call_video_rooms": true,
                "feature_matrix_rtc": true,
                "feature_element_call_native_group_calls": true
            },
            "voice_broadcast": {
                "chunk_length": 120,
                "max_length": 14400
            },
            "element_call": {
                "url": null,
                "participant_limit": 8,
                "brand": "Element Call"
            },
            "jitsi": {
                "preferred_domain": "$ELEMENT_JITSI_DOMAIN"
            }
        }
        EOF
        
        echo "Starting Nginx for Element..."
        exec nginx -g 'daemon off;'

  coturn:
    image: coturn/coturn:4.6.2-r3
    container_name: voice-stack-coturn
    restart: unless-stopped
    environment:
      COTURN_EXTERNAL_IP: ${COTURN_EXTERNAL_IP:-auto}
      COTURN_STATIC_AUTH_SECRET: ${COTURN_STATIC_AUTH_SECRET:?COTURN_STATIC_AUTH_SECRET is required}
      COTURN_MIN_PORT: ${COTURN_MIN_PORT:-49152}
      COTURN_MAX_PORT: ${COTURN_MAX_PORT:-49172}
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:?SYNAPSE_SERVER_NAME is required}
    volumes:
      - coturn_data:/var/lib/coturn
    networks:
      - voice-stack-network
    ports:
      - "${COTURN_PORT:-3478}:3478/udp"
      - "${COTURN_PORT:-3478}:3478/tcp"
      - "${COTURN_MIN_PORT:-49152}-${COTURN_MAX_PORT:-49172}:${COTURN_MIN_PORT:-49152}-${COTURN_MAX_PORT:-49172}/udp"
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'test' | nc -u -w 1 localhost 3478"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command:
      - sh
      - -c
      - |
        set -eu
        
        # Detect external IP if set to 'auto'
        if [ "$COTURN_EXTERNAL_IP" = "auto" ]; then
          echo "Detecting external IP..."
          # Try multiple methods to get external IP
          EXTERNAL_IP=""
          
          # Method 1: Try ipify.org
          EXTERNAL_IP=$(wget -qO- https://api.ipify.org 2>/dev/null || echo "")
          
          # Method 2: Try icanhazip.com if first failed
          if [ -z "$EXTERNAL_IP" ]; then
            EXTERNAL_IP=$(wget -qO- https://icanhazip.com 2>/dev/null | tr -d '\n' || echo "")
          fi
          
          # Method 3: Use hostname IP as fallback
          if [ -z "$EXTERNAL_IP" ]; then
            EXTERNAL_IP=$(hostname -i 2>/dev/null | awk '{print $1}' || echo "127.0.0.1")
          fi
          
          echo "Detected external IP: $EXTERNAL_IP"
          COTURN_EXTERNAL_IP="$EXTERNAL_IP"
        fi

        # Ensure a netcat variant is available for the healthcheck
        if command -v apk >/dev/null 2>&1; then
          apk add --no-cache busybox-extras wget >/dev/null 2>&1 || true
        elif command -v apt-get >/dev/null 2>&1; then
          apt-get update >/dev/null 2>&1 || true
          apt-get install -y netcat-openbsd wget >/dev/null 2>&1 || true
          rm -rf /var/lib/apt/lists/* || true
        fi

        echo "Starting CoTURN with external IP: $COTURN_EXTERNAL_IP"
        
        # Start CoTURN
        exec turnserver \
          --listening-port=3478 \
          --min-port=$COTURN_MIN_PORT \
          --max-port=$COTURN_MAX_PORT \
          --use-auth-secret \
          --static-auth-secret="$COTURN_STATIC_AUTH_SECRET" \
          --realm="$SYNAPSE_SERVER_NAME" \
          --external-ip="$COTURN_EXTERNAL_IP" \
          --no-cli \
          --no-tls \
          --no-dtls \
          --log-file=stdout \
          --verbose

  well-known:
    image: nginx:1.25.3-alpine
    container_name: voice-stack-well-known
    restart: unless-stopped
    environment:
      SYNAPSE_SERVER_NAME: ${SYNAPSE_SERVER_NAME:?SYNAPSE_SERVER_NAME is required}
    networks:
      - voice-stack-network
    ports:
      - "${WELL_KNOWN_PORT:-8090}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/.well-known/matrix/client"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command:
      - sh
      - -c
      - |
        set -eu
        
        echo "Setting up well-known Matrix discovery files..."
        
        WEB_ROOT="/usr/share/nginx/html"
        mkdir -p "$WEB_ROOT/.well-known/matrix"
        
        # Generate Matrix client discovery
        echo "Creating client discovery file..."
        cat > "$WEB_ROOT/.well-known/matrix/client" << EOF
{
  "m.homeserver": {
    "base_url": "https://$SYNAPSE_SERVER_NAME"
  },
  "org.matrix.msc4143.rtc_foci": [
    {
      "type": "livekit",
      "livekit_service_url": "https://$SYNAPSE_SERVER_NAME/rtc"
    }
  ]
}
EOF
        
        # Generate Matrix server discovery
        echo "Creating server discovery file..."
        cat > "$WEB_ROOT/.well-known/matrix/server" << EOF
{
  "m.server": "$SYNAPSE_SERVER_NAME:8448"
}
EOF
        
        # Custom nginx config for well-known
        echo "Configuring Nginx..."
        cat > /etc/nginx/conf.d/default.conf << EOF
server {
    listen 80;
    server_name _;
    
    location /.well-known/matrix/ {
        root /usr/share/nginx/html;
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        add_header Cache-Control "public, max-age=3600";
        add_header Content-Type application/json;
    }
    
    location / {
        return 404;
    }
}
EOF
        
        # Install curl for health checks
        apk add --no-cache curl
        
        # Verify files were created
        echo "Verifying well-known files..."
        ls -la "$WEB_ROOT/.well-known/matrix/"
        echo "Client file contents:"
        cat "$WEB_ROOT/.well-known/matrix/client"
        echo "Server file contents:"  
        cat "$WEB_ROOT/.well-known/matrix/server"
        
        echo "Starting Nginx for well-known discovery..."
        exec nginx -g 'daemon off;'

  synapse-admin:
    image: awesometechnologies/synapse-admin:0.8.7
    container_name: voice-stack-synapse-admin
    restart: unless-stopped
    depends_on:
      - synapse
    environment:
      REACT_APP_SERVER: https://${SYNAPSE_SERVER_NAME:?SYNAPSE_SERVER_NAME is required}
    networks:
      - voice-stack-network
    ports:
      - "${SYNAPSE_ADMIN_PORT:-8082}:80"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    external: true
    name: voice-stack_postgres_data
  synapse_data:
    external: true  
    name: voice-stack_synapse_data
  media_store:
    external: true
    name: voice-stack_media_store
  element_data:
    external: true
    name: voice-stack_element_data
  coturn_data:
    external: true
    name: voice-stack_coturn_data

networks:
  voice-stack-network:
    driver: bridge
